<?xml version="1.0"?>

 <!--
 
   Created Or Edited on: 29/09/2015
   Author: Dott. Antonio Mauro Galiano
 	   antoniomauro.galiano@gmail.com

   -->

<launch>

  <!-- these are the arguments you can pass this launch file, for example paused:=true -->
  <arg name="paused" default="false"/>
  <arg name="use_sim_time" default="true"/>
  <arg name="gui" default="true"/>
  <arg name="headless" default="false"/>
  <arg name="debug" default="false"/>

  <!-- We resume the logic in empty_world.launch, changing only the name of the world to be launched -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(find hyperlync_robot)/worlds/maze_static_h2.world"/>
    <arg name="debug" value="$(arg debug)" />
    <arg name="gui" value="$(arg gui)" />
    <arg name="paused" value="$(arg paused)"/>
    <arg name="use_sim_time" value="$(arg use_sim_time)"/>
    <arg name="headless" value="$(arg headless)"/>
  </include>

  <!-- Load the URDF into the ROS Parameter Server -->
  <param name="robot_description"
	 command="$(find xacro)/xacro.py '$(find hyperlync_robot)/robot_description/urdf/andbot_wide.xacro'" />

  <!-- Run a python script to the send a service call to gazebo_ros to spawn a URDF robot -->
  <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
	args="-urdf -model andbot_wide -param robot_description"/>


  <!-- Load joint controller configurations from YAML file to parameter server -->
  <rosparam file="$(find hyperlync_robot)/robot_description/config/andbot_wide.yaml" command="load"/>

  <!-- load the controllers -->
  <node name="controller_spawner"
    pkg="controller_manager"
    type="spawner" respawn="false"
    output="screen" ns="/andbot_wide"
    args="joint_state_controller
      laser_position_controller
      rightWheel_effort_controller
      leftWheel_effort_controller"
  />

  <!-- convert joint states to TF transforms for rviz, etc -->
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="false" output="screen">
    <param name="robot_description" command="$(find xacro)/xacro.py '$(find hyperlync_robot)/robot_description/urdf/andbot_wide.xacro'" />
    <remap from="/joint_states" to="/andbot_wide/joint_states" />
  </node>

<!--   <node pkg="tf" type="static_transform_publisher" name="laser_broadcaster" args="0 0 0  0 0 1 1 base_link laser 100" /> 

 <node pkg="tf" type="static_transform_publisher" name="proximity_broadcaster" args="0.1 0 0.19  0 0 0 1 base_link proximity 100" />-->



 <node name="rviz" pkg="rviz" type="rviz" args="-d $(find hyperlync_robot)/andbot.rviz" />

</launch>
